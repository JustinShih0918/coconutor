{
  "ver": "1.0.27",
  "uuid": "61875ead-148e-4212-84f9-02d11578620d",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nuniform bool invert;\nvarying mediump vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n  vec4 color = v_color;\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  float gray = 0.2126*color.r + 0.7152*color.g + 0.0722*color.b;\n  float riverColorGray = (0.2126*0.0 + 0.7152*0.3 + 0.0722*1.0);\n  float threshold = 0.3;\n  float dist = abs(gray - riverColorGray);\n  if(dist < threshold) {\n    gray = 1.0 - gray;\n  }\n  float contrast = 1.9;\n  gray = (gray - 0.5) * contrast + 0.5;\n  gray = clamp(gray, 0.0, 1.0);\n  float inverted = 1.0 - gray;\n  float outputGray = (invert ? (1.0 - gray) : gray);\n  gl_FragColor = (abs(color.r - 217.0/255.0) < threshold && abs(color.g - 87.0/255.0) < threshold && abs(color.b - 99.0/255.0) < threshold) ? vec4(color.r, color.g, color.b, color.a) : vec4(outputGray, outputGray, outputGray, color.a);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec3 a_position;\nin mediump vec2 a_uv0;\nout mediump vec2 v_uv0;\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nuniform Constant {\n  bool invert;\n};\nin mediump vec2 v_uv0;\nin vec4 v_color;\nvoid main () {\n  vec4 color = v_color;\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  float gray = 0.2126*color.r + 0.7152*color.g + 0.0722*color.b;\n  float riverColorGray = (0.2126*0.0 + 0.7152*0.3 + 0.0722*1.0);\n  float threshold = 0.3;\n  float dist = abs(gray - riverColorGray);\n  if(dist < threshold) {\n    gray = 1.0 - gray;\n  }\n  float contrast = 1.9;\n  gray = (gray - 0.5) * contrast + 0.5;\n  gray = clamp(gray, 0.0, 1.0);\n  float inverted = 1.0 - gray;\n  float outputGray = (invert ? (1.0 - gray) : gray);\n  gl_FragColor = (abs(color.r - 217.0/255.0) < threshold && abs(color.g - 87.0/255.0) < threshold && abs(color.b - 99.0/255.0) < threshold) ? vec4(color.r, color.g, color.b, color.a) : vec4(outputGray, outputGray, outputGray, color.a);\n}"
      }
    }
  ],
  "subMetas": {}
}